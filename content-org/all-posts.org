#+hugo_base_dir: ../

* Research :@research:

** DONE Note Taking with Emacs and Org Roam :emacs:org:
CLOSED: [2025-01-12 Sun 15:18]
:PROPERTIES:
:EXPORT_FILE_NAME: note-taking-with-emacs-and-org-roam
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-01-12 Sun 15:18]
:END:

#+caption: Graph view of my notes so far
#+name: roam-graph
[[/images/roam-graph.png]]

I've recently started working on my master's thesis, and as such I've been looking for a
good way to take notes. I need to be able to capture notes on my reading, as well as any
ideas or thoughts that I have. I've previously experimented with:

- *Notion* - I did like how feature rich it was, but I disliked the rigid organisation
  structure. I felt forced to organise everything into a heirarchical pages and sub-pages.
  Also, it felt like once I committed to /Notion/, it wouldn't be possible to switch
  platforms if I wanted to.

- *Obsidian* - Based on my issues with /Notion/, it would seem like this is the answer.
  I liked the [[https://zettelkasten.de/introduction/][zettlekasten]] approach to note taking - it felt more unstructured
  and aligned better with how ideas and thoughts naturally arise. I also really liked the
  idea of all my notes being stored locally as text files. It seemed like the perfect
  solution... until I saw the power of /Emacs/ and /Org./

*** Why Org?

I was drawn to how extensible it is - the ability to completely customise a workflow to match
your exact purposes is unmatched. I was also drawn to the rich set of features it supports, whilst
still being based entirely on text. I don't think I'll do the best job of selling
just how amazing this seemingly simplistic piece of software is, but there is a lot of discourse
regarding this topic on the internet already.

*** Setting up A Zettlekasten with Org Roam

[[https://www.orgroam.com][Org roam]] is an extension of org mode, which facilitates "networked thought", similar to tools like
/Roam Research/ or /Obsidian./ The key feature of this extension is the ability to seamlessly link
together org files. It also indexes this network of files, allowing to quickly search and jump
between these files. Lastly, it surfaces /backlinks/, which are references
to the current file inside other files. The idea is that these backlinks give contextual
information and help you easily traverse your network of thoughts.

#+caption: An example note, showcasing inline LaTeX rendering, and backlinks
#+name: roam-preview
[[/images/roam-preview.png]]

Out of the box, it is already a very useful tool. I've been using it to build up a sort of
second brain - I use it to capture most of the thoughts I have, about any topic.
It pairs brilliantly with org mode's organisational and task tracking features (which I may cover
in a future blog post).

**** Capturing Thoughts

/Org roam/ ships with an excellent feature, called /dailies/. These are daily notes which you can
easily capture to with a convenient keybinding:

#+caption: Capturing a daily note
#+name: roam-daily
[[/images/roam-daily.gif]]

I use this to capture incomplete thoughts and ideas as they come up, and hopefully flesh them out into
fully fledged entries in the zettlekasten. I can flag these ideas that I want to revisit with the ~IDEA~ keyword
I also use /dailies/ to maintain journal - it is quite interesting to look back on past entries!

**** Processing Captured Thoughts

I then search for anything flagged with the ~IDEA~ keyword through org mode's in-built agenda feature.
This has been a very useful feature - it means that I actually action ideas I have, rather than forgetting
about them, or making a note which I never revisit.

**** Bibliography Management

As an example of how extensible org mode is, let's explore how I've integrated
bibliography / citation management into my note taking workflow.
[[https://www.riccardopinosio.com/blog/posts/zotero_notes_article][This article]] gives much more detail on how to set this up. You can also have a look at
my [[https://github.com/shiva-tk/dots][dotfiles]] for more details.

***** Zotero
[[https://www.zotero.org][Zotero]] is a bibliography management tool. Using a browser extension, I can save research papers
to my library with a single click. Using the /better bibtex/ extension for zotero, I have set up
an automatic export of this library to /bibtex/.

***** Citations in Org Mode
Using this bibtex file, I can easily insert a citation for any paper in my library:

#+caption: Inserting a citation
#+name: org-cite-insert
[[/images/org-cite.gif]]

I can also quickly open up a paper from my library which I've referenced in a note:

#+caption: Opening a referenced paper
#+name: org-cite-open
[[/images/org-cite-open.gif]]

*** And More...

This is just a glimpse into what's possible. In future posts I may cover how I track tasks
with org mode.

* Programming :@recreational_programming:
** DONE A Total Ordering on Films
CLOSED: [2025-09-20 Sat 18:32]
:PROPERTIES:
:EXPORT_FILE_NAME: total-ordering-films
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-09-20 Sat 18:32]
:END:

The train of thought that culminated in this project set off when my good friend (Rish)
sent me a list compiled by the New York Times of the "[[https://www.nytimes.com/interactive/2025/movies/best-movies-21st-century.html][100 Best Movies of the 21st Century]]".
Scrolling through the list idle mindedly, I picked out the films which I'd seen,
silently agreeing with the list for including them. However, when given more thought,
I started to wonder the methodology behind this ranking.

My first instinct was to turn to Letterboxd. In recent years, a film's average Letterboxd rating
has become a source of truth in some sense for me. My preconceived notions and expectations about a film
are determined mostly by its average rating. Even when selecting a film to watch on lazy evenings with my flatmates,
before committing to a film, we look at its reviews.

This satisfied my curiosity temporarily. I assumed that the New York Times would have considered various ratings
of the film. At the very least, ranking films by their average rating is a starting point, from which an official ranking
can be refined.

But then I started to think about my own practices when rating a film. The truth is,
I'm pretty terrible at assigning a rating to a film after I have seen it.
Even having watched and rated 234 of them (as of today) on Letterboxd.
There have been numerous occasions when, upon reviewing my Letterboxd activity,
I've noticed inconsistencies. Films that I preferred over others, which received a lower rating.
In a large part, my rating of a film is influenced by its average rating: safety in numbers, herd mentality.
My rating can't be /that/ incorrect if it's relatively close to the average.

I suppose that on the scale of thousands of reviews, the average rating of a film is a
relatively good indicator of how good it is. But on a personal level, my own ratings mean very little,
at least to me. I considered how I might compile my own ranking, "The 100 Best Movies of All Time (According to Shiva)".
I realised that it would actually be very difficult.

I was reminded of an idea I had seen in /The Social Network/, a film which coincidentally I like very much,
and placed 10th place on the NYT list[fn:1]:

#+begin_quote
*MARK:*
Yea, it’s on. I’m not gonna do the farm
animals but I like the idea of comparing
two people together. It gives the whole
thing a very “Turing” feel since people’s
ratings of the pictures will be more implicit than, say,
choosing a number to represent each
person’s hotness like they do on
hotornot.com. The first thing we’re going
to need is a lot of pictures.
#+end_quote

#+caption: The creation of facemash, using an ELO ranking system, in /The Social Network/
[[/images/the-social-network-elo.gif]]

In the film, Mark Zuckerberg -- frustrated after breaking up with Jessica Albright --
creates a website called /Facemash/. The site asks users to pick the more attractive person out of two photos.
As people repeat this pairwise comparison, an overall ranking emerges.

Mathematically, what we usually call a “rating” is just a proxy for an underlying total ordering of films.
A score like 3/5, taken in isolation, tells us very little. It only becomes meaningful when we compare it
to the ratings of other films.

That got me thinking: what if we skipped the proxy altogether? Instead of assigning numbers to films,
we could uncover the ordering directly through comparisons. It’s hard to give a rating that faithfully
captures a film’s place in the hierarchy, but it’s much easier to choose the better of two when they’re placed side by side.

As such, the idea for [[https://github.com/shiva-tk/filmsmash][Filmsmash]] was born.

*** Building Filmsmash

The idea for Filmsmash was in place. At a high level, I wanted users to be able to rank their favourite movies,
by pairwise comparison. To get a list of movies that a user had seen, we turn to Letterboxd.

**** Letterboxd API (and Workaround)
Unfortunately, obtaining API keys for Letterboxd is difficult.
However, Letterboxd does allow users to download a dump of their data in a CSV format.
Good enough, I suppose. In my head I pictured users downloading a dump of their Letterboxd data,
giving it to Filmsmash, which then ran on the films they've seen to formulate a ranking.

**** TUI
I've always found good terminal based user interfaces to be extremely satisfying.
I decided that it would be fun to try building one for Filmsmash.
After some research into which libraries provided good support for building TUIs,
I settled on [[https://ratatui.rs/][Ratatui]], a Rust library for making TUIs.

**** Ranking Algorithm
While Mark Zuckerberg used an Elo-based system to rank candidates on Facemash,
I think a simple merge sort approach is a better fit for our app.
In Facemash, the same pairings could appear multiple times, and different people might give different answers --
so a single vote isn’t conclusive proof of which option is /better/.
That’s why a probabilistic system like Elo made sense there.
In our case, though, we’re assuming a single user with consistent preferences:
if you say you prefer Film A over Film B once, you’ll always prefer it.
The crucial difference is uncertainty -- Facemash had it, but for us, each comparison is definitive.

The downside to this approach is that we can't stop after an arbitrary number of comparisons,
the merge sort algorithm must complete. I wondered if this would require too many comparisons to be feasible.
The merge sort algorithm requires \(n \log n\) comparisons. I have 234 films that I've seen.
This means to rank the films I've watched, it would take \(234 \times \log(234)\) comparisons,
so around 1842 comparisons. If I average one comparison a second, it would take about thirty minutes.
Good enough. A fun way to kill time when exceedingly bored.

**** Film Metadata
I mentioned earlier that we obtain the films a user has seen by inspecting their Letterboxd data dump.
Inspecting the CSVs that are generated by Letterboxd, I realised that they were pretty limited,
containing only the essential information like a film's name and the year it was released.
While this is sufficient, I thought that our TUI might look a bit more fleshed out if it
included some metadata like the the director, or the plot. Luckily there are other APIs which handle this, like [[https://omdbapi.com/][OMDB]].
The API only allows one film to be queried in one call, so in order to make our TUI feel quick,
it required careful use of Rust's async / await constructs, as well as some basic caching of fetched data.

*** The Finished Product
Putting this all together, it worked out quite nicely.
It was actually quite a fun way to kill time, while I was stuck on a long bus journey.

#+caption: Filmsmash in action!
[[/images/filmsmash.gif]]

You can find the source code and try out Filmsmash from [[https://github.com/shiva-tk/filmsmash][here]].

-----------

*** My Top Ten

Using Filmsmash, I was able to rank definitively my top ten films of all time.

1. *YiYi* -- /(2000)/ Edward Yang
   [[/images/yiyi.jpg]]

2. *Perfect Days* -- /(2023)/ Wim Wenders
   [[/images/perfect-days.jpg]]

3. *Oldboy* -- /(2003)/ Park Chan-Wook
   [[/images/oldboy.jpg]]

4. *La Haine* -- /(1995)/ Mathieu Kassovitz
   [[/images/la-haine.png]]

5. *Fallen Angels* -- /(1995)/ Wong Kar-Wai
   [[/images/fallen-angels.jpg]]

6. *The Handmaiden* -- /(2016)/ Park Chan-Wook
   [[/images/the-handmaiden.jpg]]

7. *Burning* -- /(2018)/ Lee Chang-Dong
   [[/images/burning.jpg]]

8. *Eternal Sunshine of The Spotless Mind* -- /(2004)/ Michel Gondry
   [[/images/eternal-sunshine.jpg]]

9. *Lady Bird* -- /(2017)/ Greta Gerwig
   [[/images/ladybird.jpg]]

10. Before Sunset (2004), Richard Linklater
    [[/images/before-sunset.jpg]]

* Films :@films:

** DONE Burning (2018) and Perfect Days (2023) - Great Hunger :foreign_films:deep_dive:
CLOSED: [2025-01-29 Wed 03:29]
:PROPERTIES:
:EXPORT_FILE_NAME: burning-and-perfect-days
:END:
:LOGBOOK:
- State "DONE"       from "IDEA"       [2025-01-29 Wed 03:29]
:END:


[[/images/burning-01.jpg]]

*Spoilers ahead.*

/Burning (2018)/ is film that lingers with you. You find yourself thinking about it in idle moments,
even weeks after having watched it.

*** Ambiguity
The film was based on a short story by /Haruki Murakami/, titled /Barn Burning/.
The short story has a similar premise. Having read it, I was left with the same chilling feeling
that the film gave me.

#+begin_quote
"I still run past the five barns every morning. No barn in my neighborhood has burned down. And I
haven't heard about any barn burning. December's come again, and the winter birds fly overhead. And I
keep on getting older."
#+end_quote

The tension in both pieces derives not from what is shown or told, but rather from what is not.
In some cases, it is what is imagined.
The disappearance of Hae-Mi is never shown explicitly, just explored implicitly.
This theme of ambiguity begins early on, with Hae-Mi's cat, whose existence is
as ambiguous as the Hae-Mi's disappearance, and continues throughout the film.
As we follow Jong-Su's unreliable perspective, our own distrust of Ben increases
with Jong-Su's delusions. Jong-Su's imagination and speculation becomes our own.
The film never gives a definitive answer, and this is intentional.
It invites us as viewers to question whether we are right for following Jong-Su's delusions.

[[/images/burning-02.jpg]]

*** Great Hunger
What truly stuck with me about this film is Hae-Mi's character.

[[/images/burning-03.jpg]]

While outwardly she seems free-spirited, almost a /manic pixie dream girl/ who magically enters Jong-Su's life,
she harbours a deep sadness within. Underneath her facade lies a troubled, lonely and tragic character.

She speaks of a /Great Hunger/:

#+begin_quote
"The Bushmen in the Kalahari Desert talk about the two 'hungers'.
There is the Great Hunger and there is the Little Hunger.
The Little Hunger wants food for the belly; but the Great Hunger, the greatest hunger of all, is the hunger for meaning..."
#+end_quote

I found this concept of /Great Hunger/ strangely relatable.
It's a want for a greater purpose in life. A desire for true and meaningful connection with others.
Something greater than the ordinary. This concept resonated with me deeply on my viewing of this film.

[[/images/burning-04.jpg]]

Hae-Mi attempts and fails to /satiate/ her Great Hunger, be it through miming lessons, travelling.
She has plastic surgery done to appear more attractive.
But ultimately, she is lonely, and her Great Hunger remains.
What is so tragic to me is how she is mistreated by possibly her only true friend, Jong-Su, out of jealousy.
The fact this happens just before her disappearance is like salt on the wound, and Jong-Su clearly feels this as well.

One of the most moving scenes in the film is one where Hae-Mi is eating dinner with Ben and Jong-Su.
She goes from laughing, to breaking down into tears in the span of minutes.
She speaks of how she wishes she could disappear like the sunset:

#+begin_quote
"I joined the Sunset Tour on my way to the Kalahari Desert. It's a program that shows you the sunset of the desert.
But it turned out to be a parking lot. There was nothing but trash tourists left behind.
Everybody came with someone, but I was the only one by myself. I really felt all alone there.
I wondered why I was even there, all alone. Then the sun started to set.
The sun was setting beyond the endless sand-covered horizon. At first it was orange.
Then it turned blood red. Then purple, then navy. It got darker and darker as the sunset disappeared,
and my eyes suddenly welled up with tears. 'I must be at the end of the world.'
That's what I thought. 'I want to vanish just like that sunset.'
Dying is too scary, but... I wished I could disappear as if I had never existed."
#+end_quote

I think this passage surves two purposes:

- *Ambiguity.* This passage sets up the central ambiguity in the film.
  Hae-Mi speaks of wanting to disappera - was her disappearance her own doing?
- *Great Hunger.* It's an exploration of how almost futile it is to try and feed your Great Hunger.
  Travelling is often portrayed as a journey of self-discovery, but here it is portrayed
  through a much more cynical lens. It almost seems to question if anything can feed her Great Hunger.
  This scene conveys to me the depth of the loneliness of her character.

In this scene, we also learn more about Ben's character.
He claims that he's never shed a tear in his life before.
In some sense, Ben also has a Great Hunger.
His Great Hunger arises from the fact that he's never experienced /Little Hunger/.
Burning explores class, and Ben coming from a higher class than Jong-Su or Hae-Mi,
has never experienced suffering, to the point that he's never shed a tear.
Having lived a life so devoid of any suffering or hardship,
where everything he could possibly want is given to him, Ben's Great Hunger
drives him to pursue what isn't handed to him readily.
He desires what his wealth or class can't get him.
The implication here is that he turns to murder, to satiate his Great Hunger.

[[/images/burning-05.jpg]]

Ben preys on the Great Hunger of his victims.
We see through Jong-Su's eyes his other girlfriends, who like Hae-Mi are lonely people.
Ben seems to offer a solution to their Great Hunger. He uses this to lure his victims in.

*** Presentness
I watched /Perfect Days/ shortly after having watched /Burning/. This concept of /Great Hunger/ was still on my mind.
Watching the film in this mindset, it became apparent to me that /Hirayama/, much like Hae-Mi is a character who harbours Great Hunger.

[[/images/perfect-days-01.jpg]]

Unlike Burning, however, Perfect Days seeems to hint at a solution to Great Hunger.
This beautifully quiet and understated film is a meditation on being present - simplicity in routine and embracing solitude.
It teaches us to find beauty in the ordinary, much like Hirayama finds beauty in the leaves of the trees
he photographs.

[[/images/perfect-days-02.jpg]]

It seems to agree that finding anything to satiate Great Hunger is futile.
It instead tells us to embrace the Great Hunger, and rather than looking for meaning in what lies beyond the ordinary,
to instead search for it in the ordinary moments of every day.

#+begin_quote
"Now is now, next time is next time"
#+end_quote

The film does not claim that this is an easy feat. To accept and live with Great Hunger.
We see moments when Hirayama's own Great Hunger explode into tears.

[[/images/perfect-days-03.jpg]]

But Hirayama's quiet resilience through it all is inspiring.
This is such an important film to me, one which changed my outlook on life.
I truly encourage anyone reading this to give it a watch.
Not to mention how beautiful this film looks. Almost every frame is a piece of art.

[[/images/perfect-days-04.jpg]]

* Miscellaneous :@misc:

** DONE Jane Street Puzzle - April 2025 :puzzles:
CLOSED: [2025-04-15 Tue 02:54]
:PROPERTIES:
:EXPORT_FILE_NAME: js-puzzle-apr-2025
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-04-15 Tue 02:54]
:END:

[[https://www.janestreet.com/puzzles/][Jane Street publish a puzzle]] every month or so.
This is my solution for the April 2025 puzzle.

**** Problem
#+caption: Example Binary Tree
#+name: example-binary-tree
[[/images/js-puzzle-apr-2025.png]]

#+begin_quote
For a fixed \(p\), independently label the nodes of an infinite complete binary tree \(0\) with probability \(p\), and \(1\) otherwise.
For what \(p\) is there exactly a \(1/2\) probability that there exists an infinite path down the tree that sums to at most \(1\)
(that is, all nodes visited, with the possible exception of one, will be labeled \(0\)).
Find this value of \(p\) accurate to ten decimal places.
#+end_quote

**** Approach
Since the problem is defined over an infinite binary tree, it feels natural to approach it recursively.
Maybe we can set up a recurrence relation involving \(p\), and attempt to solve it?
My first instinct was to try defining the probability of a "good" path (one with at most a single 1) in terms of the probabilities at the next level of the tree.
After thinking it through more carefully, I realised that a recurrence based purely on tree layers wouldn’t capture the full picture.
Since paths can share common prefixes, the recurrence needs to be defined at the level of individual nodes rather than entire layers.
This way, we can correctly account for how the probability of a valid path depends on the structure and labels along shared parts of the tree.

**** Solution
Let \(n\) denote a node in a binary tree, with \(n.l\) / \(n.r\) representing the left left / right child nodes respectively.
We denote a node's label as \(n.x \; \in \; \{0, 1\} \).

Let's reframe the problem. If there is at least one path where the sum is at most \(1\),
this is the same as saying that *not* all the paths have a sum of at least 2.

We can formalise this idea. Define \(S(n)\) as the /minimum path sum/ of a binary tree:
\[S(n) \; = \; n.x \, + \, \min(S(n.l), \, S(n.r))\]
In other words, \(S(n)\) represents the smallest possible sum along any infinite path that begins at node \(n\).
This definition is naturally recursive: the minimum path sum at a given node is its value
plus the smaller of the minimum path sums of its left and right children.

Suppose \(S(n) > 1\), this means the minimum path sum is /strictly greater/ than \(1\), i.e.
all paths have a sum of /at least/ \(2\). We can now define the probability we aim to find.
Given the root node \(n_{0}\), we are tasked with finding the probability \(1 - P(S(n_{0}) > 1)\).

Just like we defined \(S(n)\) recursively, we can define \(P(S(n) > 1)\) recursively:
\[\begin{align*}
P(S(n) > 1) =& \; p \, \cdot \, P(S(n.l) \, > 1) \, \cdot \, P(S(n.r) \, > 1) \, \cdot \\
             & \; (1 - p) \cdot P(S(n.l) \, > 0) \cdot P(S(n.l) \, > 0)
\end{align*}\]

Breaking this down, there's a \(p\) chance that \(n.x = 0\).
In this case, the current node contributes nothing to the minimum path sum,
so both children's minimum path sums must be strictly greater than \(1\), for \(n\)'s /minimum/ path sum to be strictly greater than 1.
Concretely, if \(n.x = 0\), then \(S(n) = \min(S(n.l), \, S(n.r)) > 1\) from which it follows that \(S(n.l) > 1\) and \(S(n.r) > 1\).

Similarly, there's a \(1 - p\) chance that \(n.x = 1\). By applying similar reasoning, we can deduce that if this is the case,
it must be that \(S(n.l) > 0\) and \(S(n.r) > 0\).

We can similarly derive a recursive definition for \(P(S(n) > 0)\):
\[\begin{align*}
P(S(n) > 0) =& \; p \, \cdot \, P(S(n.l) \, > 0) \, \cdot \, P(S(n.r) \, > 0) \, \cdot \\
             & \; (1 - p)
\end{align*}\]

We now note that since the trees are infinite, each subtree is /similar/ to the parent tree.
This gives us that
\[\begin{align*}
P(S(n) \, > 0) &= P(S(n.l) \, > 0) \\
               &= P(S(n.r) \, > 0) \\
               &= P
\end{align*}\]

and


\[\begin{align*}
P(S(n) \, > 1) &= P(S(n.l) \, > 1) \\
               &= P(S(n.r) \, > 1) \\
               &= Q
\end{align*}\]

Note how we label these probabilities \(P\) and \(Q\) for clarity.

This allows us to rewrite / simplify our equations! We have that:
\[\begin{align*}
Q &= p \cdot Q^{2} \, + \, (1-p) \cdot P^{2} \\
P &= p \cdot P^{2} \, + \, (1-p)
\end{align*}\]

We aim to find a value of \(p\) such that \(1 - P(S(n_{0}) > 1) = 1 - Q = 1/2\).
This allows us to substitute \(Q = 1/2\) into our equations, yielding:
\[\begin{align*}
\frac{1}{2} &= \frac{p}{4} \, + \, (1-p) \cdot P^{2} \\
P &= p \cdot P^{2} \, + \, (1-p)
\end{align*}\]

We have two equations with two unknowns. Solving this for a solution where \(p \in [0, 1]\) gives us the solution:
\[p \approx 0.5306035754\]

**** Verifying the Solution with a Simulation
Before submitting my solution, I built a crude simulation of these randomly generated binary trees.
Simulating trees of infinite depth is impossible, so as an approximation I chose to model trees of finite depth.

First I made a python class to randomly generate a tree of a given depth:
#+begin_src python
class BinaryTree:
    def __init__(self, p, depth):
        u = random.uniform(0, 1)
        if u <= p:
            self.x = 0
        else:
            self.x = 1
        if depth != 0:
            self.l = BinaryTree(p, depth - 1)
            self.r = BinaryTree(p, depth - 1)
        else:
            self.l = None
            self.r = None

    def min_path_sum(self):
        l = self.l.min_path_sum() if self.l is not None else 0
        r = self.r.min_path_sum() if self.r is not None else 0
        return self.x + min(l, r)
#+end_src

Then I repeatedly generated these binary trees, and measured the proportion of these trees which had a good path.
I parallelised these experiments to speed up this process. Overall, it took around five minutes to run all of the iterations.
#+begin_src python
def run_single_simulation(p, depth):
    tree = BinaryTree(p, depth)
    return tree.min_path_sum() <= 1 # I.e. contains a "good" path


if __name__ == "__main__":

    # Converge to solution for p
    p = 0.5306035754

    # Verify solution by running simulation
    NUM_ITERATIONS = 1000
    TREE_DEPTH = 20

    with ProcessPoolExecutor() as executor:
        futures = [
            executor.submit(run_single_simulation, p, TREE_DEPTH)
            for _ in range(NUM_ITERATIONS)
        ]
        results = []
        for f in tqdm(futures):
            results.append(f.result())

    count = sum(results)
    print(count / NUM_ITERATIONS)
#+end_src

This gave me a number close enough to 0.5, which is what we were looking for!

* Footnotes

[fn:1] Reading through the screenplay for /The Social Network/, to find the relevant quote,
I was amused to be reminded that Mark Zuckerberg also had a blog (in the film at least).
*EDUARDO:* You and Erica split up?
*MARK:* How did you know that?
*EDUARDO:* It’s on your blog.
